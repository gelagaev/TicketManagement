//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const WEB_API_BASE_URL = new InjectionToken<string>('WEB_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(WEB_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Creates a new Ticket
     * @param body (optional) 
     * @return Success
     */
    ticket_Create(body: CreateTicketRequest | undefined): Observable<CreateTicketResponse> {
        let url_ = this.baseUrl + "/api/V1/Tickets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTicket_Create(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicket_Create(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateTicketResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateTicketResponse>;
        }));
    }

    protected processTicket_Create(response: HttpResponseBase): Observable<CreateTicketResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateTicketResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new Comment for a Ticket
     * @param body (optional) 
     * @return Success
     */
    ticket_CreateComment(ticketId: string, body: CreateCommentRequest | undefined): Observable<CreateCommentResponse> {
        let url_ = this.baseUrl + "/api/V1/Tickets/{TicketId}/Comments";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{TicketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTicket_CreateComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicket_CreateComment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateCommentResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateCommentResponse>;
        }));
    }

    protected processTicket_CreateComment(response: HttpResponseBase): Observable<CreateCommentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateCommentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets Comments for a Ticket
     * @return Success
     */
    ticket_GetComments(ticketId: string): Observable<GetCommentsResponse> {
        let url_ = this.baseUrl + "/api/V1/Tickets/{TicketId}/Comments";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{TicketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTicket_GetComments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicket_GetComments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetCommentsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetCommentsResponse>;
        }));
    }

    protected processTicket_GetComments(response: HttpResponseBase): Observable<GetCommentsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCommentsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Deletes a Ticket
     * @return Success
     */
    tickets_Delete(ticketId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/V1/Tickets/{TicketId}";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{TicketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTickets_Delete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_Delete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTickets_Delete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Deletes a Comment
     * @return Success
     */
    tickets_DeleteComment(commentId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/V1/Tickets/Comments/{CommentId}";
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{CommentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTickets_DeleteComment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_DeleteComment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTickets_DeleteComment(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a single Ticket
     * @param x_api_version (optional) 
     * @return Success
     */
    ticket_GetById(ticketId: string, x_api_version: string | undefined): Observable<GetTicketByIdResponse> {
        let url_ = this.baseUrl + "/Tickets/{TicketId}";
        if (ticketId === undefined || ticketId === null)
            throw new Error("The parameter 'ticketId' must be defined.");
        url_ = url_.replace("{TicketId}", encodeURIComponent("" + ticketId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "x-api-version": x_api_version !== undefined && x_api_version !== null ? "" + x_api_version : "",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTicket_GetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicket_GetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetTicketByIdResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetTicketByIdResponse>;
        }));
    }

    protected processTicket_GetById(response: HttpResponseBase): Observable<GetTicketByIdResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTicketByIdResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a list of all Tickets
     * @param x_api_version (optional) 
     * @return Success
     */
    ticket_List(x_api_version: string | undefined): Observable<TicketListResponse> {
        let url_ = this.baseUrl + "/Tickets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "x-api-version": x_api_version !== undefined && x_api_version !== null ? "" + x_api_version : "",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTicket_List(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTicket_List(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TicketListResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TicketListResponse>;
        }));
    }

    protected processTicket_List(response: HttpResponseBase): Observable<TicketListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicketListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates a Ticket
     * @param body (optional) 
     * @return Success
     */
    tickets_Update(body: UpdateTicketRequest | undefined): Observable<UpdateTicketResponse> {
        let url_ = this.baseUrl + "/api/V1$/Tickets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTickets_Update(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_Update(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UpdateTicketResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UpdateTicketResponse>;
        }));
    }

    protected processTickets_Update(response: HttpResponseBase): Observable<UpdateTicketResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateTicketResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates a Ticket Comment
     * @param body (optional) 
     * @return Success
     */
    tickets_CommentUpdate(body: UpdateTicketCommentRequest | undefined): Observable<UpdateTicketCommentResponse> {
        let url_ = this.baseUrl + "/api/V1/Tickets/Comments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTickets_CommentUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickets_CommentUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UpdateTicketCommentResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UpdateTicketCommentResponse>;
        }));
    }

    protected processTickets_CommentUpdate(response: HttpResponseBase): Observable<UpdateTicketCommentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateTicketCommentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CommentRecord implements ICommentRecord {
    id!: string;
    commentText!: string | undefined;
    userId!: string;
    authorFullName!: string | undefined;

    constructor(data?: ICommentRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.commentText = _data["commentText"];
            this.userId = _data["userId"];
            this.authorFullName = _data["authorFullName"];
        }
    }

    static fromJS(data: any): CommentRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CommentRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["commentText"] = this.commentText;
        data["userId"] = this.userId;
        data["authorFullName"] = this.authorFullName;
        return data;
    }
}

export interface ICommentRecord {
    id: string;
    commentText: string | undefined;
    userId: string;
    authorFullName: string | undefined;
}

export class CreateCommentRequest implements ICreateCommentRequest {
    ticketId!: string;
    commentText!: string;

    constructor(data?: ICreateCommentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketId = _data["ticketId"];
            this.commentText = _data["commentText"];
        }
    }

    static fromJS(data: any): CreateCommentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCommentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketId"] = this.ticketId;
        data["commentText"] = this.commentText;
        return data;
    }
}

export interface ICreateCommentRequest {
    ticketId: string;
    commentText: string;
}

export class CreateCommentResponse implements ICreateCommentResponse {
    comment!: CommentRecord;

    constructor(data?: ICreateCommentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] ? CommentRecord.fromJS(_data["comment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment ? this.comment.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateCommentResponse {
    comment: CommentRecord;
}

export class CreateTicketRequest implements ICreateTicketRequest {
    subject!: string;
    description!: string;

    constructor(data?: ICreateTicketRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subject = _data["subject"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateTicketRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTicketRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subject"] = this.subject;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateTicketRequest {
    subject: string;
    description: string;
}

export class CreateTicketResponse implements ICreateTicketResponse {
    ticket!: TicketRecord;

    constructor(data?: ICreateTicketResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticket = _data["ticket"] ? TicketRecord.fromJS(_data["ticket"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateTicketResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTicketResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateTicketResponse {
    ticket: TicketRecord;
}

export class GetCommentsResponse implements IGetCommentsResponse {
    comments!: CommentRecord[] | undefined;

    constructor(data?: IGetCommentsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(CommentRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCommentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCommentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCommentsResponse {
    comments: CommentRecord[] | undefined;
}

export class GetTicketByIdResponse implements IGetTicketByIdResponse {
    id!: string;
    subject!: string | undefined;
    description!: string | undefined;
    comments!: CommentRecord[] | undefined;

    constructor(data?: IGetTicketByIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subject = _data["subject"];
            this.description = _data["description"];
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(CommentRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTicketByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetTicketByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subject"] = this.subject;
        data["description"] = this.description;
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetTicketByIdResponse {
    id: string;
    subject: string | undefined;
    description: string | undefined;
    comments: CommentRecord[] | undefined;
}

export class TicketListResponse implements ITicketListResponse {
    tickets!: TicketRecord[] | undefined;

    constructor(data?: ITicketListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tickets"])) {
                this.tickets = [] as any;
                for (let item of _data["tickets"])
                    this.tickets!.push(TicketRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TicketListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicketListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tickets)) {
            data["tickets"] = [];
            for (let item of this.tickets)
                data["tickets"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITicketListResponse {
    tickets: TicketRecord[] | undefined;
}

export class TicketRecord implements ITicketRecord {
    id!: string;
    subject!: string | undefined;
    description!: string | undefined;
    isDone!: boolean;

    constructor(data?: ITicketRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subject = _data["subject"];
            this.description = _data["description"];
            this.isDone = _data["isDone"];
        }
    }

    static fromJS(data: any): TicketRecord {
        data = typeof data === 'object' ? data : {};
        let result = new TicketRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subject"] = this.subject;
        data["description"] = this.description;
        data["isDone"] = this.isDone;
        return data;
    }
}

export interface ITicketRecord {
    id: string;
    subject: string | undefined;
    description: string | undefined;
    isDone: boolean;
}

export class UpdateTicketCommentRequest implements IUpdateTicketCommentRequest {
    id!: string;
    commentText!: string;

    constructor(data?: IUpdateTicketCommentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.commentText = _data["commentText"];
        }
    }

    static fromJS(data: any): UpdateTicketCommentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTicketCommentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["commentText"] = this.commentText;
        return data;
    }
}

export interface IUpdateTicketCommentRequest {
    id: string;
    commentText: string;
}

export class UpdateTicketCommentResponse implements IUpdateTicketCommentResponse {
    comment!: CommentRecord;

    constructor(data?: IUpdateTicketCommentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] ? CommentRecord.fromJS(_data["comment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTicketCommentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTicketCommentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment ? this.comment.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateTicketCommentResponse {
    comment: CommentRecord;
}

export class UpdateTicketRequest implements IUpdateTicketRequest {
    id!: string;
    subject!: string;
    description!: string;

    constructor(data?: IUpdateTicketRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subject = _data["subject"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateTicketRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTicketRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subject"] = this.subject;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateTicketRequest {
    id: string;
    subject: string;
    description: string;
}

export class UpdateTicketResponse implements IUpdateTicketResponse {
    ticket!: TicketRecord;

    constructor(data?: IUpdateTicketResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticket = _data["ticket"] ? TicketRecord.fromJS(_data["ticket"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTicketResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTicketResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateTicketResponse {
    ticket: TicketRecord;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}